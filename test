#!/bin/bash

assert() {
  if [[ $1 != $2 ]]; then
    echo "Wrong answer! Expected [$1], found [$2]"
    if [[ -n $3 ]]; then
      echo "(input array was [$3])"
    fi
    exit 1
  fi
}

test_suite() {
  local prog=${*:2}
  local input_n input_arr expected

  exec 5< "../_test/$1.in"
  exec 6< "../_test/$1.out"

  read expected <&6
  local k=0
  while [[ -n $expected ]]; do
    read input_n <&5
    read input_arr <&5

    printf "Running test case $((++k)) (size $input_n)... "
    local actual=$(printf "$input_n\n$input_arr\n" | $prog)
    assert "$expected" "$actual" "$input_arr"
    echo "Done"

    read expected <&6
  done

  exec 5<&-
  exec 6<&-
  echo "All tests in dataset $1 passed!"
}

test_static() {
  local prog=$@
  local expected='1 2 3 4 5 6 7 8 9 10'
  local actual=$($prog)
  assert "$expected" "$actual"

  echo "Static test passed!"
}

cd "$1" || {
  echo "Error: implementation $1 not found."
  exit 1
}

source .env

if [[ -z $RUN_CMD ]]; then
  echo "Error: no run command for $1 was defined."
  exit 1
fi

eval "$BUILD_CMD"

TEST_SUITES=${TEST_SUITES:-test1}
for suite in ${TEST_SUITES//,/ }; do
  if [[ $suite == 'static' ]]; then
    test_static $RUN_CMD
  else
    test_suite $suite $RUN_CMD
  fi
done
